{"ast":null,"code":"import { MediaUIAttributes, TextTrackKinds } from \"../constants.js\";\nconst splitTextTracksStr = (textTracksStr = \"\") => textTracksStr.split(/\\s+/);\nconst parseTextTrackStr = (textTrackStr = \"\") => {\n  const [kind, language, encodedLabel] = textTrackStr.split(\":\");\n  const label = encodedLabel ? decodeURIComponent(encodedLabel) : void 0;\n  return {\n    kind: kind === \"cc\" ? TextTrackKinds.CAPTIONS : TextTrackKinds.SUBTITLES,\n    language,\n    label\n  };\n};\nconst parseTextTracksStr = (textTracksStr = \"\", textTrackLikeObj = {}) => {\n  return splitTextTracksStr(textTracksStr).map(textTrackStr => {\n    const textTrackObj = parseTextTrackStr(textTrackStr);\n    return {\n      ...textTrackLikeObj,\n      ...textTrackObj\n    };\n  });\n};\nconst parseTracks = trackOrTracks => {\n  if (!trackOrTracks) return [];\n  if (Array.isArray(trackOrTracks)) {\n    return trackOrTracks.map(trackObjOrStr => {\n      if (typeof trackObjOrStr === \"string\") {\n        return parseTextTrackStr(trackObjOrStr);\n      }\n      return trackObjOrStr;\n    });\n  }\n  if (typeof trackOrTracks === \"string\") {\n    return parseTextTracksStr(trackOrTracks);\n  }\n  return [trackOrTracks];\n};\nconst formatTextTrackObj = ({\n  kind,\n  label,\n  language\n} = {\n  kind: \"subtitles\"\n}) => {\n  if (!label) return language;\n  return `${kind === \"captions\" ? \"cc\" : \"sb\"}:${language}:${encodeURIComponent(label)}`;\n};\nconst stringifyTextTrackList = (textTracks = []) => {\n  return Array.prototype.map.call(textTracks, formatTextTrackObj).join(\" \");\n};\nconst isMatchingPropOf = (key, value) => obj => obj[key] === value;\nconst textTrackObjAsPred = filterObj => {\n  const preds = Object.entries(filterObj).map(([key, value]) => {\n    return isMatchingPropOf(key, value);\n  });\n  return textTrack => preds.every(pred => pred(textTrack));\n};\nconst updateTracksModeTo = (mode, tracks = [], tracksToUpdate = []) => {\n  const preds = parseTracks(tracksToUpdate).map(textTrackObjAsPred);\n  const isTrackToUpdate = textTrack => {\n    return preds.some(pred => pred(textTrack));\n  };\n  Array.from(tracks).filter(isTrackToUpdate).forEach(textTrack => {\n    textTrack.mode = mode;\n  });\n};\nconst getTextTracksList = (media, filterPredOrObj = () => true) => {\n  if (!(media == null ? void 0 : media.textTracks)) return [];\n  const filterPred = typeof filterPredOrObj === \"function\" ? filterPredOrObj : textTrackObjAsPred(filterPredOrObj);\n  return Array.from(media.textTracks).filter(filterPred);\n};\nconst areSubsOn = el => {\n  var _a;\n  const showingSubtitles = !!((_a = el.mediaSubtitlesShowing) == null ? void 0 : _a.length) || el.hasAttribute(MediaUIAttributes.MEDIA_SUBTITLES_SHOWING);\n  return showingSubtitles;\n};\nexport { areSubsOn, formatTextTrackObj, getTextTracksList, isMatchingPropOf, parseTextTrackStr, parseTextTracksStr, parseTracks, splitTextTracksStr, stringifyTextTrackList, textTrackObjAsPred, updateTracksModeTo };","map":{"version":3,"names":["MediaUIAttributes","TextTrackKinds","splitTextTracksStr","textTracksStr","split","parseTextTrackStr","textTrackStr","kind","language","encodedLabel","label","decodeURIComponent","CAPTIONS","SUBTITLES","parseTextTracksStr","textTrackLikeObj","map","textTrackObj","parseTracks","trackOrTracks","Array","isArray","trackObjOrStr","formatTextTrackObj","encodeURIComponent","stringifyTextTrackList","textTracks","prototype","call","join","isMatchingPropOf","key","value","obj","textTrackObjAsPred","filterObj","preds","Object","entries","textTrack","every","pred","updateTracksModeTo","mode","tracks","tracksToUpdate","isTrackToUpdate","some","from","filter","forEach","getTextTracksList","media","filterPredOrObj","filterPred","areSubsOn","el","_a","showingSubtitles","mediaSubtitlesShowing","length","hasAttribute","MEDIA_SUBTITLES_SHOWING"],"sources":["/Users/kelaiyaparikh/projects/first-app/client/node_modules/media-chrome/dist/utils/captions.js"],"sourcesContent":["import { MediaUIAttributes, TextTrackKinds } from \"../constants.js\";\nconst splitTextTracksStr = (textTracksStr = \"\") => textTracksStr.split(/\\s+/);\nconst parseTextTrackStr = (textTrackStr = \"\") => {\n  const [kind, language, encodedLabel] = textTrackStr.split(\":\");\n  const label = encodedLabel ? decodeURIComponent(encodedLabel) : void 0;\n  return {\n    kind: kind === \"cc\" ? TextTrackKinds.CAPTIONS : TextTrackKinds.SUBTITLES,\n    language,\n    label\n  };\n};\nconst parseTextTracksStr = (textTracksStr = \"\", textTrackLikeObj = {}) => {\n  return splitTextTracksStr(textTracksStr).map((textTrackStr) => {\n    const textTrackObj = parseTextTrackStr(textTrackStr);\n    return {\n      ...textTrackLikeObj,\n      ...textTrackObj\n    };\n  });\n};\nconst parseTracks = (trackOrTracks) => {\n  if (!trackOrTracks)\n    return [];\n  if (Array.isArray(trackOrTracks)) {\n    return trackOrTracks.map((trackObjOrStr) => {\n      if (typeof trackObjOrStr === \"string\") {\n        return parseTextTrackStr(trackObjOrStr);\n      }\n      return trackObjOrStr;\n    });\n  }\n  if (typeof trackOrTracks === \"string\") {\n    return parseTextTracksStr(trackOrTracks);\n  }\n  return [trackOrTracks];\n};\nconst formatTextTrackObj = ({ kind, label, language } = { kind: \"subtitles\" }) => {\n  if (!label)\n    return language;\n  return `${kind === \"captions\" ? \"cc\" : \"sb\"}:${language}:${encodeURIComponent(\n    label\n  )}`;\n};\nconst stringifyTextTrackList = (textTracks = []) => {\n  return Array.prototype.map.call(textTracks, formatTextTrackObj).join(\" \");\n};\nconst isMatchingPropOf = (key, value) => (obj) => obj[key] === value;\nconst textTrackObjAsPred = (filterObj) => {\n  const preds = Object.entries(filterObj).map(([key, value]) => {\n    return isMatchingPropOf(key, value);\n  });\n  return (textTrack) => preds.every((pred) => pred(textTrack));\n};\nconst updateTracksModeTo = (mode, tracks = [], tracksToUpdate = []) => {\n  const preds = parseTracks(tracksToUpdate).map(textTrackObjAsPred);\n  const isTrackToUpdate = (textTrack) => {\n    return preds.some((pred) => pred(textTrack));\n  };\n  Array.from(tracks).filter(isTrackToUpdate).forEach((textTrack) => {\n    textTrack.mode = mode;\n  });\n};\nconst getTextTracksList = (media, filterPredOrObj = () => true) => {\n  if (!(media == null ? void 0 : media.textTracks))\n    return [];\n  const filterPred = typeof filterPredOrObj === \"function\" ? filterPredOrObj : textTrackObjAsPred(filterPredOrObj);\n  return Array.from(media.textTracks).filter(filterPred);\n};\nconst areSubsOn = (el) => {\n  var _a;\n  const showingSubtitles = !!((_a = el.mediaSubtitlesShowing) == null ? void 0 : _a.length) || el.hasAttribute(MediaUIAttributes.MEDIA_SUBTITLES_SHOWING);\n  return showingSubtitles;\n};\nexport {\n  areSubsOn,\n  formatTextTrackObj,\n  getTextTracksList,\n  isMatchingPropOf,\n  parseTextTrackStr,\n  parseTextTracksStr,\n  parseTracks,\n  splitTextTracksStr,\n  stringifyTextTrackList,\n  textTrackObjAsPred,\n  updateTracksModeTo\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}